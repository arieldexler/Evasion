'use strict';

angular.module('myApp.view1', ['ngRoute'])

.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/view1', {
    templateUrl: 'view1/view1.html',
    controller: 'View1Ctrl'
  });
}])

.controller('View1Ctrl', ['$scope',function($scope) {
    var playerPos=[0,0]; 
    var playerPos2=[230,200]; 
    $scope.SCORE = 0;
    var pubSocket = new WebSocket('ws://localhost:1990');

    pubSocket.onopen = function (e) {
        console.log("OPEN");
    }
    
    pubSocket.onmessage = function (pubTurn) {
        console.log(pubTurn);
        var turn = JSON.parse(pubTurn.data);
        if (turn.gameover) {
            window.alert("Hunter Won");
        }
        playerPos = [ turn.hunter[0], turn.hunter[1] ];
        playerPos2 = [ turn.prey[0], turn.prey[1] ];
        for (var i = 0; i < turn.walls.length; i++) {
            var curWall = turn.walls[i];
            var origin = curWall.position;
            switch(curWall.direction) {
                case "N":
                case "S": vertWall(origin[0],origin[1],curWall.direction,curWall.length);
                    break;
                case "E":
                case "W": horWall(origin[0],origin[1],curWall.direction,curWall.length);
                    break;
            }
        }
        $scope.SCORE = turn.time;
	$scope.$apply();
        drawCanvas();
    }
    
    function vertWall(oldX,oldY,dir,length) {
	if (dir == "N") {
		for (var i = oldX, j=oldY; j > oldY-length; j--) {
		    drawWall(i,j);
		}
	}
	if (dir == "S") {
		for (var i = oldX, j=oldY; j <= oldY+length; j++) {
		    drawWall(i,j);
		}
	}
    }
    function horWall (oldX,oldY,dir,length) {
	if (dir == "E") {
		for (var i = oldX, j=oldY; i <= oldX+length; i++) {
		    drawWall(i,j);
		}
	}
	if (dir == "W") {
		for (var i = oldX, j=oldY; i > oldX-length; i--) {
		    drawWall(i,j);
		}
	}
    }
    
     
    
    var arenaSize = 300;
    var UNIT_SIZE = 2;
    var playerDir=pi/4;
    var samples=200;
    var pi=Math.PI;
    var face = [];
    var mapball = null;
    var mapball2 = null;
    
    var theMap = document.getElementById("map");
    var actualSize = arenaSize+2;
    var dimension = actualSize*UNIT_SIZE;
    var map=Raphael(theMap,dimension,dimension);
    var arena=initArena(actualSize,actualSize); 
    initUnderMap();
    drawCanvas();

    //var createdWalls = [];
    function drawWall(i, j) {
        arena[i][j]==2;
        var wallUnit = map.rect((i+1)*UNIT_SIZE,(j+1)*UNIT_SIZE,UNIT_SIZE,UNIT_SIZE).attr({fill:"red", stroke:"red"});

    }
    
    $scope.arenaSize=arenaSize;
    $scope.UNIT_SIZE = UNIT_SIZE;
    $scope.dimension = actualSize*UNIT_SIZE;
    
    function initArena(arenaWidth,arenaLength) {
        var arena=[];
        for (var i=0; i<arenaWidth; i++) {
            arena[i] = [];
            for (var j=0; j<arenaLength; j++) {
                arena[i][j] = 1;
                if (i==0 || i==(arenaWidth-1)) {arena[i][j]=2;} 
                if (j==0 || j==(arenaLength-1)) {arena[i][j]=2;} 
            }
        }
        
        var cellStack = [];
        var currCell = [0,0];
        var currX = currCell[0];
        var currY = currCell[1];
        for (var i = 1; i < arenaWidth-1; i++) {
            for (var j = 1; j < arenaLength-1; j++) {
                currCell = [i,j];
                currX = currCell[0];
                currY = currCell[1];
                arena[currX][currY] = 0;
                cellStack.push(currCell);
            }
        }
        
        return arena;
    }
    
    function initUnderMap(){
        var ulen = arena.length;
        var uwid = arena[0].length;
        map.rect(0,0, uwid*UNIT_SIZE, ulen*UNIT_SIZE).attr({fill:"#FFF", stroke:"#fff"});
        for (var i=0; i<uwid; i++) {
            for (var j=0; j<ulen; j++) {
                var i8 = i*UNIT_SIZE;
                var j8 = j*UNIT_SIZE;
                if (arena[i][j]==1) { map.rect(i8,j8, UNIT_SIZE,UNIT_SIZE).attr({fill:"#444", stroke:"#444"}); }
                if (arena[i][j]==2) { map.rect(i8,j8, UNIT_SIZE,UNIT_SIZE).attr({fill:"#888", stroke:"#888"}); }
            }
        }
    }
    
    function drawCanvas(){
	/*
        var theta = playerDir-pi/6;

        var wall=wallDistance(theta);

        var linGrad;

        var tl,tr,bl,br;

        var theta1,theta2,fix1,fix2,j = 0;
        
        for (var i=0; i<wall.length; i+=4) {

            theta1=playerDir-pi/6 + pi*wall[i]/(3*samples);
            theta2=playerDir-pi/6 + pi*wall[i+2]/(3*samples);

            fix1 = Math.cos(theta1-playerDir);
            fix2 = Math.cos(theta2-playerDir);

            var wallH1=100/(wall[i+1]*fix1);
            var wallH2=100/(wall[i+3]*fix2);

            tl=[wall[i]*2 + .001, 150-wallH1*1];
            tr=[wall[i+2]*2 + .001, 150-wallH2*1];
            br=[wall[i+2]*2 + .001, tr[1]+wallH2*2];
            bl=[wall[i]*2 + .001, tl[1]+wallH1*2];

            var shade1=Math.floor(wallH1*2+20); if (shade1>255) shade1=255;
            var shade2=Math.floor(wallH2*2+20); if (shade2>255) shade2=255;

            var c1 = 'rgb('+(face[i/4]%2==0 ? shade1 : 0)+','+(face[i/4]==1 ? shade1 : 0)+','+(face[i/4]==2 ? 0 : shade1)+')';
            var c2 = 'rgb('+(face[i/4]%2==0 ? shade2 : 0)+','+(face[i/4]==1 ? shade2 : 0)+','+(face[i/4]==2 ? 0 : shade2)+')';

        }*/
        //var walls = [];
        
        var bSize = 4*UNIT_SIZE;
        if (!mapball && !mapball2) {
            // HUNTER
            mapball = map.circle((playerPos[0]+1)*UNIT_SIZE, (playerPos[1]+1)*UNIT_SIZE, bSize/2).attr({fill:"#36c", stroke: "none"});
            // PREY
            mapball2 = map.circle((playerPos2[0]+1)*UNIT_SIZE, (playerPos2[1]+1)*UNIT_SIZE, bSize/2).attr({fill:"green", stroke: "none"});
        } else {
            mapball.attr({
                cx: playerPos[0] * UNIT_SIZE,
                cy: playerPos[1] * UNIT_SIZE
            });
	    mapball2.attr({
                cx: playerPos2[0] * UNIT_SIZE,
                cy: playerPos2[1] * UNIT_SIZE
            });
        }
        //while (walls[j]) walls[j++].hide();
    }

}]);
