## Application interface

Here is some insight as to the input and output (communication is all in JSON format):

Here is an enum for passing direction you want to move to (we are in the process of changing method to accept string instead of a value for this enum but is lower on priority list):

var cardinalDirections = {
    N: [0,1],
    S: [0,-1],
    E: [1,0],
    W: [-1,0],
    NE: [1,-1],
    NW: [-1,-1],
    SE: [1,1],
    SW: [-1,1]
};

The sample input for hunter are these JSON formatted commands sent to the webSocket:
 //For building walls
 
 ```javascript
 {
   command:'B',
   wall: {
     length: INTEGER_VALUE,
     direction: <i.e. cardinalDirections.N>
   }
  }
 ```
 
  //For deleting walls
  {
    command: 'D',
    wallIndex: <int>
  }
  //For not doing anything (just moving)
  {
    command:'M'
  }

The sample input for prey socket are
{
  command: 'M',
  direction: <i.e cardinalDirections.N>
}

Both players can pass the following:
{
  command: "P"
}
this returns the positions of the hunter and the prey
{
  command: "W"
}
this returns the positions of the wall



Overall Architecture:

1 Web Socket that publishes a turn
1 Web Socket for Hunter to Communicate with Server
1 Web Socket for Prey to Communicate with Server

We are currently finishing up testing that moves are working as expected. We will publish the github url soon. There will be a html file for sample commands and soon after a java client to sample commands.

- Amir (Brooklyn)
